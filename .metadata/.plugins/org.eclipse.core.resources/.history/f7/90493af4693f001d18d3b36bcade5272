package com.cockandballs.scarlett;

import java.util.Scanner;

public class Main {
	public static void main(String args[]) {
		System.out.println(wordReversal("This is so awesome"));
		System.out.println(secondToLast("This is le  epicly"));
		//System.out.println(positionInPhrase("lorem ipsum dolor and my balls"));
		System.out.println(wordSearch("lorem ipsum dolor and my balls"));
	}
	
	private static String wordReversal(String phrase) { // returns entered phrase in reverse
		
		// method 1, with stringbuilder (Easy)
		//String phraseReversed = new StringBuilder(phrase).reverse().toString();
		
		// method 2, logically
		String phraseReversed = ""; // init string
		for(int i=phrase.length() - 1; i>=0; i--) { // for loop backwards from start of phrase
			phraseReversed = phraseReversed + phrase.charAt(i); // concatenate character to reversed phrase
		}
		
		return phraseReversed;
	}
	
	private static String secondToLast(String phrase) { // returns second to last word in phrase
		String phraseFiltered = phrase.replaceAll("\\s+", " ");
		String[] phraseArray = phraseFiltered.split(" ");
		return(phraseArray[phraseArray.length - 2]);
	}
	
	private static String positionInPhrase(String phrase) {
		Scanner sc = new Scanner(System.in);
		String phrasePos = "";
		
		System.out.println("Enter position in phrase: ");
		String pos = sc.nextLine();
		if(!pos.chars().allMatch( Character::isDigit )) {
			System.out.println("Enter a positive integer!");
		} else {
			int posI = Integer.parseInt(pos);
			String phraseFiltered = phrase.replaceAll("\\s+", " ");
			String[] phraseArray = phraseFiltered.split(" ");
			if (posI < 1 || posI > phraseArray.length) {
				System.out.println("Value out of range!");
			} else {
				phrasePos = phraseArray[posI - 1];
			}
		}
		return phrasePos;
	}
	
	private static boolean wordSearch(String phrase) {
		boolean isInPhrase = false;
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a word: ");
		String word = sc.nextLine();
		
		if(phrase.contains(word)) {
			isInPhrase = true;
		}
		
		return isInPhrase;
	}
}
